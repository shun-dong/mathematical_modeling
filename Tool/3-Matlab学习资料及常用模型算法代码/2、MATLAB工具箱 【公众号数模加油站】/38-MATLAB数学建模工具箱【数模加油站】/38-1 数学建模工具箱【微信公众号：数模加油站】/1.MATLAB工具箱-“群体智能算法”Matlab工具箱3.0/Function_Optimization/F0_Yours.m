function F = F0_Yours(X,Parmaters)
% 优化函数：自定义的函数（并行算法）
% 全局最小X=-0.5,-1.3333,2,最小值为F=0
% 输入参数:
% X - 输入参数矩阵（popsize*dim的矩阵）
% Parmaters - 由Options.Parmaters传入的函数参数（无参数时不使用）
% 输出参数:
% F - 函数输出（popsize*1的矩阵）

%--------------------------------------------------------------------------
% 全局最小X=-0.5,-1.33,2,最小值为F=0

% 主函数参数传递方式：
% Options.Parmaters.p1 = a;
% Options.Parmaters.p2 = b;
% 
% 这里参数读取方式：
% a = Parmaters.p1;
% b = Parmaters.p2;

F = (2*X(:,1)+1).^2+(3*X(:,2)+4).^2+(X(:,3)-2).^2;

% [popsize,dim] = size(X);
% F = zeros(popsize,1);
% for i = popsize
%     
% x = X(i,:);
% F(i) = (x(1).^x(2)+x(2).^x(1)-5*x(1).*x(2).*x(3)-85).^2+(x(1).^3.*x(2).^x(3).*x(3).^x(2)-60).^2+(x(1).^x(3)+x(3).^x(1)-x(2)-0.55).^2;
% 
% end

% 2.0以前的版本不敢担保，但2.0, 2.5版运行下面代码，大概80-90％的概率能得到最优解。
% 
% Algorithm = GLM[200];
% MinFunction (x1^x2+x2^x1-5*x1*x2*x3-85)^2+(x1^3*x2^x3*x3^x2-60)^2+(x1^x3+x3^x1-x2-0.55)^2;
% 
% 最优结果：
% 目标函数值(最小): 0
% x1: 19390.8841948436
% x2: 0.45
% x3: 2.33057529481628E-25
% 
% 如果将x3变为2.33057529481628E-24，从绝对值来看变化是很微小的了，但目标函数变为11903.45934，这也是题目所言“失之毫厘，谬以千里”之由。
% 
% 下面是Lingo代码，注意初值已经给的非常接近1stOpt得到的最优值了，但最终结果还是回到了局部最优（11.0试用版）。
% 
% Init:
% x1= 19390;
% x2= 0.45;
% x3= 2.33057529481628E-25;
% EndInit
% Min =(x1^x2+x2^x1-5*x1*x2*x3-85)^2+(x1^3*x2^x3*x3^x2-60)^2+(x1^x3+x3^x1-x2-0.55)^2;
% Global optimal solution found.
%   Objective value:                             0.6463502E-01
%   Objective bound:                             0.6463500E-01
%   Infeasibilities:                              0.000000
%   Extended solver steps:                             571
%   Total solver iterations:                        210589
% 
%                        Variable           Value        Reduced Cost
%                              X1        4.834151           0.1778444E-07
%                              X2        2.439950           0.2640767E-07
%                              X3       0.6160029           0.4128631E-07
% 
% 这道题仅是一例，并不能由此下结论孰优孰劣，每个软件都有优点和缺点。

end

