function eemview(datasource,datafield,varargin)

%Produce EEM contour plots in a customised layout and scroll forward or backward
%through the plot windows. Several different datasets can be plotted at the
%same time. Optional inputs control the appearance of the plots including
%axis orientation and limits, contour density and scale, and plot size and
%labeling.
%
%USEAGE: eemview(datasource,datafield,plotlayout,istart,plotview,datalabel,axeslimits,rotate,colorbar,ncontours,plotsize)
%
%INPUT VARIABLES: 
% datasource:  One or more data structures to be plotted. If more than one,
%              then each  must have the same number of samples, such that 
%              for two datasets {A,B}, the i'th sample in A corresponds to
%              the i'th sample in B. Use this e.g. to compare two EEMs 
%              generated by sets of models with different initialisation 
%              conditions or convergence criteria that are stored in
%              separate data structures.
%
%              e.g. OriginalData, or {OriginalData,Test2}, or {Test2,Test2}
%
%  datafield:  identifies the data to be plotted corresponding to each data structure 
%              e.g. 'X',  or {'X','Model4'},  or {'X','Model4','error_residuals'}
%              Accepts 3-way datasets or loadings of 3-way models.
%              In general there must be one data field named for each datasource. 
%              A special case is allowed only if a datafield is called 
%              'error_residuals'. In this case, the difference between
%              the two previous data fields will be plotted. This can be used to
%              plot data versus models and residuals, as in Example 4
%              below, or compare two or more models, as in Example 5.
%              The titles for these plots will be Err 1, Err 2 etc or can
%              be chosen from the metadata fields of the first source used in the
%              difference calculation (see help for datalabel below).    
%
% plotlayout:  (optional) specify number of plots per page, as [rows columns]
%                 default is [1 1] for one data structure
%                 or [1 n] for n data structures
%                 e.g [3 2] : 6 plots per page in 3 rows and 2 columns
%              
%     istart:  (optional) specify index of starting sample 
%                   []: start plotting at first sample (default)
%                    n: start at sample with index = n (nb: whether the nth
%                    sample will be the first plot shown on a multi-page plot
%                    depends on the plot layout. This makes it possible to
%                    start in the middle of the dataset and then scroll
%                    backwards through to the first sample)
%
%   plotview:  (optional) length of time (in seconds) to show EEMs on screen 
%                 []: manually flick forward or backward through plots (default)
%                  n: display for n seconds
%
%
%  datalabel:  (optional) specify titles for each plot in each datastructure
%                 using either metadata in the datastructure, or by simple
%                 numbering, or by numbers with a prefix
%                 []: simple numbering 1:nSample (default)
%           'label' : if datasource.label is a field containing metadata, the
%               contents of this field will be used to label each plot
%               If it is not, the plots will be labelled Model 1, Model 2, ... etc
%               In the special case of plotting error residuals, the
%               metadata used to label the error plots comes from
%               the second-last source specified in datasource
%               e.g. source A, if datasource was {A,B} or source B, if it was {A,B,C} 
%               
% axeslimits:  (optional) For multiple data sources, you can fix the relative 
%                 intensity scale for each set of plots corresponding to
%                 the i'th sample in each dataset
%                 e.g. if datasource ={A,B,C} and axeslimits = [1 1 0.1] 
%                 Then plots for sample i in sources A and B will have the 
%                 same intensity scale, while plots for source C
%                 will depict an intensity range of ±10% of A and B.
%                 see Example 3, below
%
%      rotate: (optional) 
%                     []: plots have excitation wavelengths on the x axis
%               'rotate': plots have emission wavelengths on the x axis
%
%    colorbar: (optional) 
%                     []: no colorbar
%             'colorbar': show intensity scale in colorbar next to each  plot
%             
%   ncontours: (optional) 
%                     []: default contour selection by MATLAB
%                    [n]: n contour lines in each plot
%             
%    plotsize: (optional)
%            [] or 'big': figure will take up most of the screen (default)
%               'normal': normal figure size 
%
%EXAMPLES
% 1.   eemview(OriginalData,'X')
% 2.   eemview(OriginalData,'X',[3 3])
% 3.   eemview(Xs,'X',[2 2],100,2,'longID',[],'rotate','colorbar',20)
% 4.   eemview({Test4,Test4},{'X','Model6','error_residuals'},[2 3],[],[],{'data','model','error'},[1 1 0.1])
% 5.   eemview({Test4,Test4,Test4,Test4},{'X','Model5','error_residuals','X','Model6','error_residuals'},
%                         [2 3],[],[],{'Test4','M5','error','Test4','M6','error'},[1 1 0.1 1 1 0.1])
%
% Notice:
% This mfile is part of the drEEM toolbox. Please cite the toolbox
% as follows:
%
% Murphy K.R., Stedmon C.A., Graeber D. and R. Bro, Fluorescence
%     spectroscopy and multi-way techniques. PARAFAC, Anal. Methods, 2013, 
%     DOI:10.1039/c3ay41160e. 
%
% eemview: Copyright (C) 2013 Kathleen R. Murphy
% The University of New South Wales
% Dept Civil and Environmental Engineering
% Water Research Center
% UNSW 2052
% Sydney
% krm@unsw.edu.au
%
% $ Version 0.1.0 $ September 2013 $ First Release

%% Initialisation
if nargin < 2
    error('Too few input arguments')
else
    docolorbar=false;
    rotate=false;
    dodifferencematrix=false;
    istart=1;
    axeslimits=[];
    datalabel=[];
    axeslabels=true;
    plotview=[];
    ncontours=[];
    bigplot=true;
end
if isstruct(datasource);
    numDS=size(datasource,1);
    numDF=size(datafield,1);
    nSample=datasource.nSample;
elseif iscell(datasource)
    numDS=size(datasource,2);
    numDF=size(datafield,2);
    nSample=datasource{1}.nSample;
end
df_i=1:numDS;

if ~isequal(numDS,numDF)
    err_i=find(strcmp('error_residuals',datafield)==1);
    df_i=find(strcmp('error_residuals',datafield)==0);
    if isempty(err_i)
        error('eemview:fields','A data fieldname must be specified for each data source')
    else
        dodifferencematrix=true;
        %nSample=(1+length(err_i))*nSample,pause
    end
end

%floor(numDF/(numDS+1))==numDF/(numDS+1)

plotlayout=[1 numDF];
labelnums=num2str((1:nSample)');

if nargin>2
    plotlayout=varargin{1};
    if nargin>3
        istart=varargin{2};
        if nargin>4
            plotview=varargin{3};
            if ~or(isnumeric(plotview),isempty(plotview))
                error('Valid inputs for plotview are numbers or []')
            end
            if nargin>5
                datalabel=varargin{4};
                if nargin>6
                    axeslimits=varargin{5};
                    if nargin>7
                        r=varargin{6};
                        if strcmp(r,'rotate')
                            rotate=true;
                        elseif ~isempty(r)
                            warning('Input 8 not understood. No rotation will be performed...')
                        end
                        if nargin>8
                            co=varargin{7};
                            if strcmp(co,'colorbar')
                                docolorbar=true;
                            elseif ~isempty(co)
                                warning('Input 9 not understood. No intensity scale will be shown...')
                            end
                            if nargin>9
                                ncontours=varargin{8};
                                if ~isnumeric(ncontours)
                                    warning('Input 10 not understood. Using default contour lines...')
                                    ncontours=[];
                                end
                                if nargin>10
                                    plotsize=varargin{9};
                                    if strcmp(plotsize,'big')
                                        bigplot=true;
                                    elseif or(strcmp(plotsize,'normal'),~isempty(plotsize))
                                        warning('Input 11 not understood. Plots of normal size...')
                                        bigplot=false;
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

%Check consistency of data labels
if ~isempty(datalabel)
    if iscell(datalabel)
        if ~isequal(numDF,size(datalabel,2))
            error('eemview:labels','Number of data labels specified must correspond with the number of data fields')
        end
    else
        if ~isequal(numDF,size(datalabel,1))
            error('eemview:labels','Number of data labels specified must correspond with the number of data fields')
        end
    end
end
%Check consistency of data axes
if ~isempty(axeslimits)
    if iscell(axeslimits)
        axeslimits=axeslimits{1};
    end
    if ~isequal(numDF,length(axeslimits))
        error('eemview:axes','Number of data axes specified must correspond with the number of data fields')
    end
end
    
%% Construct dataset
if isstruct(datasource);
    datasource={datasource};
    if ~iscell(datafield)
        datafield={datafield};
    end
    if ~iscell(datalabel)
        datalabel={datalabel};
    end
end
exlen=cell([1 numDS]);emlen=exlen;nS=exlen;
for i=1:numDS
    nS{i}=datasource{i}.nSample;
    exlen{i}=datasource{i}.nEx;
    emlen{i}=datasource{i}.nEm;
end
if ~isequal(max(cell2mat(nS)),min(cell2mat(nS)))
    error('eemview:nSample','Each data source must have the same number of samples')
else
    nSample=nS{1};
end
exmax=max(cell2mat(exlen));
emmax=max(cell2mat(emlen));

if dodifferencematrix
    inc=numDS+length(err_i);
else
    inc=numDS;
end
X=NaN*ones(inc*datasource{1}.nSample,emmax,exmax);
EmMat=NaN*ones(inc*datasource{1}.nSample,emmax);
ExMat=NaN*ones(inc*datasource{1}.nSample,exmax);
labels=cell(inc*nSample,1);
for i=1:numDS
    j=df_i(i);
    datain=datasource{i}.(datafield{j});
    if iscell(datain)
        datain =nmodel(datain);
    end
    
    if isempty(datalabel)
        labels(j:inc:end)=cellstr(labelnums);
    else
        if isfield(datasource{i},datalabel{j})
            if ~isequal(size(datasource{i}.(datalabel{j})),[nSample 1])
                warning(['Invalid data label: ' datalabel{j}]);
                error(['data.' datalabel{j} ' does not contain a valid set of data labels']);
            else
                labels(j:inc:end)=datasource{i}.(datalabel{j});
            end
        else
            labels(j:inc:end)=cellstr([repmat(datalabel{j},[size(labelnums,1) 1]) labelnums]);
        end
    end
    
    X(j:inc:end,1:emlen{i},1:exlen{i})=datain;
    EmMat(j:inc:end,1:emlen{i})=repmat((datasource{i}.Em)',[nSample 1]);
    ExMat(j:inc:end,1:exlen{i})=repmat((datasource{i}.Ex)',[nSample 1]);
end

if dodifferencematrix     %Special Case
    numDS=numDS+length(err_i);
    for j=1:length(err_i)
        i=err_i(j);       %labels, datafields for err
        k=find(df_i==i-2);%1st datasource and location of metadata
        X1=X(i-2:inc:end,:,:);
        X2=X(i-1:inc:end,:,:);
        E=X1-X2;
        X(i:inc:end,:,:)=E;
        EmMat(i:inc:end,1:emlen{k})=repmat((datasource{k}.Em)',[nSample 1]);
        ExMat(i:inc:end,1:exlen{k})=repmat((datasource{k}.Ex)',[nSample 1]);
        if isempty(datalabel)
            labels(i:inc:end)=cellstr([repmat('Err',[size(labelnums,1) 1]) labelnums]);
        else
            if isfield(datasource{k},datalabel{i}) %labels from first source in pair
                if ~isequal(size(datasource{k}.(datalabel{i})),[nSample 1])
                    warning(['Invalid data label: ' datalabel{i}]);
                    error(['data.' datalabel{i} ' does not contain a valid set of data labels']);
                else
                    labels(i:inc:end)=datasource{k}.(datalabel{i});
                end
            else
                labels(i:inc:end)=cellstr([repmat(datalabel{i},[size(labelnums,1) 1]) labelnums]);
            end
        end
    end
end

%% Plotting
if isempty(plotlayout)
    plotlayout=[1 numDS];
end
plotperpage=prod(plotlayout);
nopages=ceil(numDS*nSample/plotperpage);
firstplot=1:plotperpage/numDS:numDS*nSample;
%disp(firstplot),pause
xax=prod(plotlayout)-plotlayout(2)+1:prod(plotlayout);
yax=1:plotlayout(2):prod(plotlayout)-plotlayout(2)+1;
axlabels=char('Ex. (nm)','Em. (nm)');
if rotate
    axlabels=flipud(axlabels);
end

if istart>1
    page=find((firstplot-istart)<=0,1,'last');
else
    page=1;
end
proceed=true;
fprintf('\n\n')
if isempty(plotview)
    fprintf('Manually scroll forward or backward through plots\n')
else
    fprintf(['Plots will each be displayed for ' num2str(plotview) ' seconds\n'])
end
fprintf('Press control-C at any time to cancel ...')
fprintf('\n\n')
if bigplot
    scrsz = get(0,'ScreenSize');
    hf=figure('Position',[scrsz(3)/4 scrsz(4)/4 scrsz(3)/1.5 scrsz(4)/1.5]);
else
    hf=figure;
end
set(hf,'Name','drEEM - eemview');
while proceed
    fprintf(['Now viewing page ' num2str(page) ' of ' num2str(nopages) '\n'])
    current=firstplot(page);

    %plot
    
    z=0;
    for i=1:plotperpage
        j=i+current*numDS-numDS;
        if j>numDS*nSample
            fprintf('** Finished **\n')
            proceed=false;
            break
        end
        z=z+1;
        if plotperpage>1
            subplot(plotlayout(1),plotlayout(2),i)
        end
        EmIn=EmMat(j,:);EmIn=EmIn(~all(isnan(EmIn),1));
        ExIn=ExMat(j,:);ExIn=ExIn(~all(isnan(ExIn),1));
        
        Xin=squeeze(X(j,1:length(EmIn),1:length(ExIn)));
        
        if rotate
            if isempty(ncontours)
                contourf(EmIn',ExIn,Xin')
            else
                contourf(EmIn',ExIn,Xin',ncontours)
            end
        else
            if isempty(ncontours)
                contourf(ExIn',EmIn,Xin)
            else
                contourf(ExIn',EmIn,Xin,ncontours)
            end
        end
        
        if ~isempty(axeslimits)
            if ismember(z,err_i-2)
                clim=get(gca,'CLim')*axeslimits(z);
            else
                if ismember(z,err_i)
                    set(gca,'CLim',[-clim(2)*axeslimits(z) clim(2)*axeslimits(z)]);
                else
                    set(gca,'CLim',[clim(1) clim(2)*axeslimits(z)]);
                end
            end
        end
        
        title(labels(j,:));
        if docolorbar
            colorbar
        end
        
        if axeslabels
            if ismember(i,xax)
                xlabel(axlabels(1,:));
            end
            if ismember(i,yax)
                ylabel(axlabels(2,:));
            end
        end
        if z==inc;
            z=0;
        end
    end
    
    if page<nopages
        if isempty(plotview)
            f=input('press enter to go forward 1 page, or a number, n, to go back n pages: ');
            figure(hf)
            %close
            if isempty(f)
                page=page+1;
            else
                if isnumeric(f);
                    page=max(1,page-f);
                end
                if page>nopages
                    page=nopages;
                end
            end
        else
            pause(plotview)
            page=page+1;
        end
%         if page==nopages;
%             close
%         end
    else
        break
    end
end
