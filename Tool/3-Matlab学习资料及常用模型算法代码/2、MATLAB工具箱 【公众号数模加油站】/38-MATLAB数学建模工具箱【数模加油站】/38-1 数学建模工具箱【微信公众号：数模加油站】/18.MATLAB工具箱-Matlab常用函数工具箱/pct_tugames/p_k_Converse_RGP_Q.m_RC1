function [kCRGP kCRGPC]=p_k_Converse_RGP_Q(v,x,K,str,tol)
% k_Converse_RGP_Q checks whether an imputation x satisfies the k-CRGP, 
% that is, the k-converse reduced game property (k-converse consistency).
% Using Matlab's PCT.
%
% Usage: [kCRGP kCRGPC]=p_k_Converse_RGP_Q(v,x,K,str,tol)
% Define variables:
%  output: Fields
%  CrgpQ    -- Returns 1 (true) whenever the k-CRGP is satisfied, 
%              otherwise 0 (false).
%  crgpQ    -- Gives a precise list of reduced games for which the 
%              restriction of x on S is a solution of the reduced game vS. 
%              It returns a list of zeros and ones.
%  vS       -- All Davis-Maschler or Hart-MasColell reduced games on S at x 
%              with k-players.
%  sV_x     -- Returns a vector of extended solutions x_s to x_N for 
%              all reduced games vS.              
%  input:
%  v        -- A Tu-Game v of length 2^n-1. 
%  x        -- payoff vector of size(1,n). Must be efficient.
%  K        -- An integer value equal to or greater than 2, 
%              but not larger than n.
%  str      -- A string that defines different Methods. 
%              Permissible methods are: 
%              'PRN' that is, the Davis-Maschler reduced game 
%               in accordance with the pre-nucleolus.
%              'PRK' that is, the Davis-Maschler reduced game 
%               in accordance with pre-kernel solution.
%              'SHAP' that is, the Hart-MasColell reduced game
%               in accordance with the Shapley value.
%              Default is 'PRK'.
%  tol      -- Tolerance value. By default, it is set to 10^6*eps.
%              (optional) 
%              


%  Author:        Holger I. Meinhardt (hme)
%  E-Mail:        Holger.Meinhardt@wiwi.uni-karlsruhe.de
%  Institution:   University of Karlsruhe (KIT)  
%
%  Record of revisions:
%   Date              Version         Programmer
%   ====================================================
%   05/22/2011        0.1 alpha        hme
%   06/29/2012        0.2 beta         hme
%   05/28/2013        0.3              hme
%                


if nargin<2
  x=PreKernel(v);
  n=length(x);
  tol=10^6*eps;
  str='PRK';
  K=2;
elseif nargin<3
  n=length(x);
  tol=10^6*eps;
  str='PRK';
  K=2;
elseif nargin<4
  n=length(x);
  tol=10^6*eps;
  str='PRK';
elseif nargin<5
  n=length(x);
  tol=10^6*eps;
else
  n=length(x);
end

N=length(v);
S=1:N;
PlyMat=false(N,n);
parfor i = 1:n, PlyMat(:,i) = bitget(S,i)==1; end

% Checking now whether the imputation solves the reduced game for 
% every K-player coalitions.
sumPM=PlyMat*ones(n,1);
slcl2=sumPM==K;
cl2=S(slcl2);
PlyMat2=PlyMat(cl2,:);
siPM2=size(PlyMat2,1);

vS=cell(1,siPM2);
stdsol=cell(1,siPM2);
crgpq=cell(1,siPM2);
crgpQ=false(1,siPM2);
sV_x=cell(1,siPM2);

spmd
 codistributed(sV_x);
 codistributed(vS);
 codistributed(stdsol);
 codistributed(crgpq);
 codistributed(crgpQ);
end

parfor k=1:siPM2
sV_x{1,k}=x;
 if strcmp(str,'SHAP')
   vS{1,k}=HMS_RedGame(v,x,cl2(k)); %Hart-MasColell reduced game.
   stdsol{1,k}=ShapleyValue(vS{1,k}); % solution x restricted to S.
   rSk=PlyMat2(k,:);
   sV_x{1,k}(rSk)=stdsol{1,k}; % extension to (x,x_N\S).
   crgpq{k}=abs(sV_x{1,k}-x)<tol;
   crgpQ(k)=all(crgpq{k});
 elseif strcmp(str,'PRK')
   rSk=PlyMat2(k,:);
   vS{1,k}=RedGame(v,x,cl2(k)); % Davis-Maschler reduced game.
   stdsol{1,k}=PreKernel(vS{1,k},x(rSk)); % solution x restricted to S.
   sV_x{1,k}(rSk)=stdsol{1,k}; % extension to (x,x_N\S).
   crgpQ(k)=PrekernelQ(v,sV_x{1,k});
 elseif strcmp(str,'PRN')
   rSk=PlyMat2(k,:);
   vS{1,k}=RedGame(v,x,cl2(k)); % Davis-Maschler reduced game.
   try
     stdsol{1,k}=Prenucl(vS{1,k},x(rSk)); % solution x restricted to S.
   catch
     stdsol{1,k}=PreNucl2(vS{1,k},x(rSk)); % use a third party solver instead!
   end
   sV_x{1,k}(rSk)=stdsol{1,k}; % extension to (x,x_N\S).
   crgpq{k}=abs(sV_x{1,k}-x)<tol;
   crgpQ(k)=all(crgpq{k});
 else
   rSk=PlyMat2(k,:);
   vS{1,k}=RedGame(v,x,cl2(k)); % Davis-Maschler reduced game.
   stdsol{1,k}=PreKernel(vS{1,k},x(rSk)); % solution x restricted to S.
   sV_x{1,k}(rSk)=stdsol{1,k}; % extension to (x,x_N\S).
   crgpQ(k)=PrekernelQ(v,sV_x{1,k});
  end
end
CrgpQ=all(crgpQ);
%Formatting Output
if nargout>1
 kCRGP=struct('CrgpQ',CrgpQ,'crgpQ',crgpQ);
 kCRGPC={'vS',vS,'sV_x',sV_x};
else
  kCRGP=struct('CrgpQ',CrgpQ,'crgpQ',crgpQ);
end
